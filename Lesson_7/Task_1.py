# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса
# (метод init()), который должен принимать данные (список списков) для формирования
# матрицы. Подсказка: матрица — система некоторых математических величин, расположенных
# в виде прямоугольной схемы. Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода str() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода add() для реализации операции сложения двух объектов
# класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой
# строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.


class Matrix:
    def __init__(self, input_data):
        self.input = input_data

    def __str__(self):
        return '\n'.join(['\t'.join([str(j) for j in i]) for i in self.input])

    def __add__(self, other):
        answer = ''
        if len(self.input) == len(other.input):
            for line_1, line_2 in zip(self.input, other.input):
                if len(line_1) != len(line_2):
                    return 'Не совпадают размерности матриц'

                summed_line = [x + y for x, y in zip(line_1, line_2)]
                answer += '\t'.join(map(str, summed_line)) + '\n'
        else:
            return 'Не совпадают размерности матриц'
        return answer


matrix_1 = Matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])
matrix_2 = Matrix([[17, 13, 12, 11], [8, 7, 7, 6], [5, 2, 4, 9], [1, 1, 2, 2]])
print(matrix_1)
print()
print(matrix_2)
print()
print(matrix_1 + matrix_2)
